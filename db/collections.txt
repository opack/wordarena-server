players : [						// Joueurs qui participe à des parties. Il y a une relation de 1-1 avec un utilisateur.
	{
		_id : string,			// Pseudo unique du joueur
		phone : string,			// Identifiant du mobile du joueur		
		score : integer,		// Nombre de points du joueur pour les ligues et le match-making
		title : string,			// Titre actuel. Correspond à une valeur de l'enum Titles.name()
		blessings : string[],	// Tableau des bénédictions. Correspond à des valeurs de l'enum Blessings.name()
		game_ids : int[]		// Identifiants des parties en cours
	}
],
games : [						// Parties
	{
		_id : int				// Identifiant unique de la partie
		startTime : timestamp,	// Date / heure de création (utiliser un type Date ?)
		type : string,			// Type de partie. Correspond à une valeur de l'enum GameTypes.name()
		curRound : integer,
		curTurn : integer,
		cur_player : integer,	// Joueur dont c'est le tour. Correspond à un indice du tableau players
		first_player : integer,	// Joueur ayant débuté ce round
		gameOver : boolean,		// Indique si la partie est terminée		
		players : string[],		// Liste des pseudos des joueurs participant à la partie, dans l'ordre de jeu
		arena : {				// JSON de l'arène au moment où la partie a été sauvegardée
			
		},
		wordsPlayed : [			// Liste des mots déjà joués au cours de cette partie
			{
				time : timestamp,
				player_id : string,
				word_id : string
			}
		],
		lastPlay : [			// Liste ordonnée des cellules sélectionnées lors du dernier mot
			{
				x : integer,
				y : integer
			}
		],
		chats : [				// Messages échangés entre les joueurs
			{
				time : timestamp,
				player_id : string,
				message : string
			}
		]
	}
],
dictionary : [					// Les mots du dictionnaire
	{
		_id : string,			// Le mot, en majuscules
		status : string,		// Statut du mot (valide, en attente de validation, supprimé). Correspond à une valeur de l'enum WordStatus.name() (V, P, R => valid, pending, removed)
	}
]