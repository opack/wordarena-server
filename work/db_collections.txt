players : [						// Joueurs qui participe à des parties. Il y a une relation de 1-1 avec un utilisateur.
	{
		_id : string,			// Pseudo unique du joueur
		phone : string,			// Identifiant du mobile du joueur		
		score : integer,		// Nombre de points du joueur pour les ligues et le match-making
		title : string,			// Titre actuel. Correspond à une valeur de l'enum Titles.name()
		blessings : string[],	// Tableau des bénédictions. Correspond à des valeurs de l'enum Blessings.name()
		gameIds : int[]			// Identifiants des parties en cours
	}
],
games : [						// Parties
	{
		header : {				// Entête de la partie, contenant des infos générales
			_id : int,			// Identifiant unique de la partie
			type : string,		// Type de partie. Correspond à une valeur de l'enum GameTypes.name()
			objective : string,	// L'objectif de la partie, càd les règles appliquées à la partie. Correspond à une valeur de l'enum GameObjectives.name()
			createTime : date,	// Date/heure de création de la partie
			startTime : date,	// Date/heure de début du partie. Si null, alors la partie n'a pas encore débuté et des joueurs peuvent la rejoindre.
			endTime : date,		// Date où la partie prend fin (dépend du temps de jeu choisi et de la date du dernier coup)
			lastUpdateTime : date,	// Date/heure de la dernière mise à jour de la partie
		},
		cinematic : {
			curRound : integer,
			curTurn : integer,
			curPlayer : integer,	// Joueur dont c'est le tour. Correspond à un indice du tableau players
			firstPlayer : integer,	// Joueur ayant débuté ce round. Correspond à un indice du tableau players
			gameOver : boolean,		// Indique si la partie est terminée
		},
		players : string[],		// Liste des pseudos des joueurs participant à la partie, dans l'ordre de jeu
		arena : {				// JSON de l'arène au moment où la partie a été sauvegardée
			
		},
		wordsPlayed : [			// Liste des mots déjà joués au cours de cette partie
			{
				time : date,
				player : int,	// Joueur ayant joué ce mot. Correspond à un indice du tableau players
				wordId : string
			}
		],
		lastMove : {
			playerId : string,	// Joueur qui a joué ce dernier coup
			cells : [			// Liste ordonnée des cellules sélectionnées lors du dernier mot
				{
					x : integer,
					y : integer
				}
			]
		},
		chats : [				// Messages échangés entre les joueurs
			{
				time : date,
				playerId : string,
				message : string
			}
		]
	}
],
lexisFR : [					// Les mots du dictionnaire d'une langue. XX = Code ISO de la langue, sans pays, en majuscules. Ex : FR, EN, DE...
	{
		_id : string,			// Le mot, en majuscules
		valid : boolean,		// Indique si le mot est valide ou non. Ce booléen ne peut changer que sur intervention d'admin.
		requestAdd : string[]	// Pseudos des joueurs qui demandent l'ajout de ce mot parmi les mots valides
		requestRemove : string[]// Pseudos des joueurs qui demandent que ce mot soit invalidé
	}
]